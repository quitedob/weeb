修复后端架构, 创建统一的 ChatController, 将 MessageController 和 ChatListController 的所有功能逻辑迁移至其中, 然后将旧的 MessageController 和 ChatListController 标记为 @Deprecated 并计划移除.
迁移用户管理端点, 将分散在 AuthController 和 ArticleCenterController 中的用户信息获取和更新功能 (如 /user/info, /update, /userinform-by-username) 全部整合到 UserController 中.
限定 AuthController 的职责, 使其仅负责处理认证流程, 包括用户注册, 登录和令牌管理.
重构并统一所有API端点以遵循RESTful规范.
将文章创建接口从 POST /api/articles/new 修改为 POST /api/articles.
将文章点赞接口从 POST /api/articles/{id}/like 修改为 POST /api/articles/{id}/likes.
将消息发送接口从 POST /api/v1/message/send 迁移到新的 ChatController, 路径统一为 POST /api/v1/chats/{chatId}/messages.
将获取聊天记录的接口从 POST /api/v1/message/record 修改为 GET /api/v1/chats/{chatId}/messages, 并支持分页参数.
将消息撤回接口从 POST /api/v1/message/recall 修改为 DELETE /api/v1/messages/{messageId}.
重构用户注册接口, 将其业务逻辑从 AuthController 迁移至 UserController, 端点为 POST /api/users, 并要求请求体使用强类型的 RegisterUserVo 替代当前的 Map<String, Object>.
重构用户登录接口, 将 POST /api/login 修改为 POST /api/tokens, 语义上为创建一个新的认证令牌.
重构获取当前用户信息接口, 将 GET /api/user/info 修改为 GET /api/users/me, 专门用于获取当前认证用户的数据.
将群组创建接口从 POST /api/group/create 修改为 POST /api/groups.
将邀请群成员接口从 POST /api/group/{groupId}/invite 修改为 POST /api/groups/{groupId}/members.
整合后端服务层以保证数据一致性, 将 UserService, UserStatsService, 和 UserTransactionService 的逻辑合并, 确立 UserService 为用户数据操作的唯一入口, 并在其方法上使用 @Transactional 注解, 保证对 user 和 user_stats 两个表的操作在同一事务中完成.
审查并修复 ArticleService 和 ArticleMapper 中所有与用户统计数据相关的操作, 确保点赞, 收藏等操作正确更新 user_stats 表, 而非 user 表中的旧统计字段.
审查 ArticleCommentService, 在创建评论并触发通知时, 确保查询文章作者ID的逻辑能够正确地从 user 表和 user_stats 表关联查询数据.
重构前端API客户端模块以匹配新的后端接口.
修改 /src/api/modules/article.js 文件, 使其所有API请求指向重构后的 /api/articles 相关端点.
修改 /src/api/modules/auth.js 和 /src/api/modules/user.js 文件, 使其API请求分别指向 /api/tokens 和 /api/users 相关端点.
修改 /src/api/modules/chat.js 文件, 使其所有API请求指向新建的统一 ChatController 提供的 /api/v1/chats 相关端点.
修改 /src/api/modules/group.js 文件, 使其所有API请求指向重构后的 /api/groups 相关端点.
简化前端状态管理, 在重构API客户端后, 审查并优化位于 /src/stores/ 目录下的 Pinia store, 移除为适配碎片化API而编写的复杂数据拼接和状态组合逻辑.
实现完整的文件共享功能, 完善 FileManagementController 和 FileManagementService, 增加生成安全共享链接, 设置访问权限 (如仅查看, 允许下载) 及分享给指定用户的后端接口.
将通知系统升级为实时推送模式. 在 NotificationService 中, 当创建新通知时, 调用 RedisTemplate 将通知消息发布到指定频道. WebSocketService 中增加一个Redis订阅者 (RedisSubscriber), 监听该频道, 接收到消息后通过WebSocket连接将通知实时推送给对应的在线用户.
统一并规范化后端错误处理. 审查项目中所有Controller的异常处理逻辑, 确保返回的 ApiResponse 对象的业务码严格使用在 ApiResponse.ErrorCode 中定义的常量, 避免在业务代码中硬编码错误码.
更新项目文档, 修改 README.md 文件中的API文档部分, 使其与所有重构后的RESTful API端点, 请求方法, 和数据结构完全一致.