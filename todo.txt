# Weeb 应用程序开发进度报告 - 更新版

## 🎯 优先行动计划 (Phase 1: 基础稳定)

### 高优先级 - 立即解决
- [ ] **修复现有测试文件的编译错误**
  - **说明**: 这是项目的最高优先级任务，因为它阻碍了所有其他验证工作。 
  - **行动**: 运行 `mvn test`，识别所有编译失败的测试类（例如，`DatabaseInitializerTest.java`, `ApiResponseConsistencyTest.java` 等）。 对比测试代码中的方法调用与服务层/Mapper层中的实际方法签名，进行同步更新。 
  - **目标**: 恢复一个可完整运行的测试套件。

- [ ] **统一聊天API**
  - **说明**: 解决前端 (`chat.js`) 和后端 (`MessageController`, `ChatListController`) 之间 API 设计不一致的问题。 
  - **行动**:
    - [ ] 创建新的 `ChatController.java`，统一处理 `/api/v1/chats` 下的所有聊天相关请求。
    - [ ] 将 `MessageService` 和 `ChatListService` 的逻辑重构为由新的 `ChatController` 调用。
    - [ ] 弃用 `MessageController` 和 `ChatListController` 中的相关端点。
    - [ ] 更新前端 `/src/api/modules/chat.js` 以使用新的、统一的 RESTful 端点，简化 `ChatPage.vue` 等组件的逻辑。
  - **目标**: 提供一个单一、面向资源的聊天API，降低前端复杂性并提升性能。

## 🔄 核心功能完善 (Phase 2: 功能补全)

### 进行中的任务
1. **完善并测试文件管理后端**
   - **说明**: 现有 `FileManagementServiceImpl` 已实现上传、列表和删除功能。 任务重点是完成缺失的“共享”功能并进行全面测试。 
   - **行动**:
     - [ ] 为 `FileManagementController` 和 `FileManagementServiceImpl` 中已有的上传（含哈希去重）、删除和列表功能编写全面的单元和集成测试。
     - [ ] **实现文件共享功能**:
       - [ ] 根据 `FileShare.java` 模型创建 `file_share` 数据库表。
       - [ ] 在 `FileManagementController` 中添加新端点 (`POST /api/files/{fileId}/share`, `GET /api/shares/{shareToken}`, `DELETE /api/files/share/{shareId}`)。
       - [ ] 在 `FileManagementServiceImpl` 中实现创建和验证安全共享令牌的逻辑。
     - [ ] **前端集成**:
       - [ ] 在 `src/api/modules/fileManagement.js` 中添加调用共享API的函数。
       - [ ] 创建一个新的 `MyFiles.vue` 组件，用于显示文件列表、处理上传，并提供共享文件的用户界面。

## 📋 全面验证 (Phase 3: 质量保证)

### 待完成的测试任务
- [ ] **测试新增的核心功能模块**
  - **说明**: 验证所有新集成的系统是否按预期工作，并确保它们之间的交互正确无误。
  - **行动**:
    - [ ] **文章评论系统**: 测试创建评论、回复、删除自己的评论、以及为文章作者正确触发通知。 
    - [ ] **用户关注系统**: 测试关注/取消关注流程、查看关注/粉丝列表，并验证是否触发新关注者通知。 
    - [ ] **群组管理**: 测试完整的群组生命周期，包括创建、邀请、申请加入、踢出成员和解散群组，并验证权限控制。 
    - [ ] **联系人管理**: 测试好友申请、接受、拒绝和拉黑的完整工作流，并验证数据库状态更新的正确性。 
    - [ ] **搜索功能**: 验证用户、群组和基于Elasticsearch的消息内容搜索，包括分页和关键词匹配。 

- [ ] **验证通知系统的完整性与性能**
  - **说明**: 确保所有应触发通知的事件都能可靠、高效地生成通知。 
  - **行动**:
    - [ ] **完整性审计**: 创建一个测试矩阵，覆盖所有通知触发事件（如新评论、新关注、文章点赞等），并验证数据库中生成的 `Notification` 记录是否准确。
    - [ ] **性能测试**: 模拟高并发场景（例如，大量用户同时点赞），测量通知创建的延迟，并监控数据库负载。

## 🔧 技术债务

### 待解决
- [ ] **同步的通知创建**: 当前通知在主业务流程中同步创建，可能在高负载下导致API响应延迟。应重构为使用Spring Events的异步模型。
- [ ] **测试覆盖率不足**: 核心功能完成后，需要为新增的服务和控制器补充单元测试和集成测试，以提高代码质量。 

### 已解决
- ✅ 用户搜索性能、JWT权限、API路径匹配问题。
- ✅ 群组申请、联系人管理、通知系统等核心功能缺失问题。

## 🚀 未来发展路线图 (Post-Stabilization)

- [ ] **实现音视频聊天功能**: 利用现有的WebRTC信令后端，重点开发前端媒体流管理和UI。
- [ ] **实现实时通知推送**: 升级通知系统，使用WebSocket和Redis Pub/Sub代替前端轮询，实现即时通知。
- [ ] **UI/UX优化**: 根据用户反馈进行界面和交互的迭代改进。

## 📝 备注

- 项目已达到MVP（最小可行产品）标准，具备完整的社交平台核心功能。 
- 下一步的重点是稳定基础、完善核心功能并进行全面测试，为未来的功能迭代奠定坚实的基础。