=== 用户等级历史和角色权限功能实现TODO ===


## 需要完善的功能

### 1. 数据库表创建（高优先级）
**文件位置**: src/main/resources/db/migration/ 或 DatabaseInitializer.java
**功能**: 创建role_permission和user_level_history表
**实现方式**:
```sql
-- role_permission表
CREATE TABLE IF NOT EXISTS role_permission (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    role_id BIGINT NOT NULL COMMENT '角色ID',
    permission_id BIGINT NOT NULL COMMENT '权限ID',
    status INT DEFAULT 1 COMMENT '状态 0:无效 1:有效',
    created_by BIGINT COMMENT '创建人ID',
    updated_by BIGINT COMMENT '更新人ID',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    remark VARCHAR(500) COMMENT '备注',
    INDEX idx_role_id (role_id),
    INDEX idx_permission_id (permission_id),
    INDEX idx_status (status),
    UNIQUE KEY uk_role_permission (role_id, permission_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='角色权限关联表';

-- user_level_history表
CREATE TABLE IF NOT EXISTS user_level_history (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL COMMENT '用户ID',
    old_level INT COMMENT '原等级',
    new_level INT NOT NULL COMMENT '新等级',
    change_reason VARCHAR(500) COMMENT '变更原因',
    change_type INT NOT NULL COMMENT '变更类型 1:系统自动 2:管理员操作 3:用户行为触发',
    operator_id BIGINT COMMENT '操作者ID',
    operator_name VARCHAR(100) COMMENT '操作者名称',
    change_time DATETIME NOT NULL COMMENT '变更时间',
    ip_address VARCHAR(50) COMMENT 'IP地址',
    user_agent VARCHAR(500) COMMENT '用户代理',
    remark VARCHAR(500) COMMENT '备注',
    status INT DEFAULT 1 COMMENT '状态 0:无效 1:有效',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    INDEX idx_user_id (user_id),
    INDEX idx_change_type (change_type),
    INDEX idx_operator_id (operator_id),
    INDEX idx_change_time (change_time),
    INDEX idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户等级变更历史表';


### 5. 前端逻辑对齐问题
**发现的问题**:
- 前端页面已创建，但需要验证与后端API的接口对齐
- 权限验证流程是否与后端拦截器逻辑一致
- 数据格式和错误处理是否匹配
**解决方案**: 运行前端页面测试API调用和数据展示

### 6. 单元测试（低优先级）
**文件位置**: src/test/java/com/web/service/
**功能**: 为Service层编写单元测试
**实现方式**:
- RolePermissionServiceTest.java - 测试角色权限服务
- UserLevelHistoryServiceTest.java - 测试等级历史服务
- 使用Mockito模拟依赖
- 测试覆盖率达到80%以上

### 7. API文档更新（低优先级）
**文件位置**: backend.md
**功能**: 更新API文档，添加新增的接口说明
**实现方式**:
- 添加/api/role-permissions/*接口文档
- 添加/api/user-level-history/*接口文档
- 包含请求参数、响应格式、错误码说明

### 8. 性能优化（低优先级）
**优化点**:
- 为role_permission和user_level_history表添加合适的索引
- 实现角色权限缓存机制（使用Redis）
- 批量操作优化
- 分页查询性能优化
