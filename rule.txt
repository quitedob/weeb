本项目是一个前后端分离的应用, 前端使用Vue 3, 后端使用Java Spring Boot.
核心设计理念是分层清晰, 职责单一, 接口标准化, 高内聚低耦合.
所有开发人员必须严格遵守本规范.
项目使用MySQL数据库和MyBatis-Plus持久层框架.
后端遵循多层架构模型, 数据流向为 Controller, Service, Mapper, Database.
Controller层是API的入口, 负责接收HTTP请求, 使用@Valid注解校验参数, 并调用Service层.
Controller层严禁编写复杂业务逻辑.
接收请求必须使用位于com.web.vo包下的VO对象封装请求体.
所有接口的返回类型必须是ResponseEntity<ApiResponse<T>>, 并使用com.web.common.ApiResponse类进行包装.
Service层采用接口加实现的设计模式, 接口位于com.web.service包, 实现位于com.web.service.impl包.
涉及多张表读写的复杂数据库操作, 必须在ServiceImpl的方法上使用@Transactional注解.
ServiceImpl中的方法逻辑必须与Mapper接口的操作完全对应.
修改ServiceImpl中的方法签名, 必须立即同步更新其对应的Service接口.
Mapper层采用接口加XML的方式, Mapper接口位于com.web.mapper包, XML文件位于resources/Mapper目录.
简单的单表CRUD操作应直接使用MyBatis-Plus提供的方法.
复杂的多表查询应在XML文件中编写SQL.
Mapper接口的方法名必须与XML中statement的id一致, @Param注解的参数名也必须与XML中的引用严格匹配.
位于com.web.model包的实体类与数据库表一一对应.
位于com.web.vo包的视图对象专门用于Controller层接收请求.
User表和UserStats表的分离设计是为了避免高并发下的写锁竞争, User表存储低频更新信息, UserStats表存储高频更新的统计信息.
业务逻辑错误应抛出自定义的WeebException.
GlobalExceptionHandler会统一捕获异常并以标准化的ApiResponse格式返回给前端.
前端所有HTTP通信必须通过src/api/axiosInstance.js中封装的axios实例.
请求拦截器会自动添加JWT到请求头.
响应拦截器会统一处理ApiResponse格式.
新的API请求应根据业务领域添加到src/api/modules/目录下的对应模块中.
全局状态管理必须使用Pinia.
用户的认证信息由src/stores/authStore.js管理.
新功能模块应在src/stores/目录下创建独立的Store文件.
UI组件库统一使用Element Plus.
全局样式必须使用src/assets/apple-style.css中定义的CSS变量.
所有页面路由在src/router/index.js中定义.
需要认证的页面应作为Layout.vue的子路由, 并在路由元信息中添加meta, { requiresAuth, true }.
数据库使用MySQL.
DatabaseInitializer.java会在非生产环境自动创建库和表.
user表和user_stats表分离是关键性能设计, 开发涉及用户统计数据的功能时, 必须操作user_stats表.