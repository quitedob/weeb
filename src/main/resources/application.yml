server:
  port: 8080

spring:
  profiles:
    active: dev # Default to dev environment
    # 可用的配置文件：dev, prod
    # 生产环境启动命令：java -jar app.jar --spring.profiles.active=prod

  # MySQL数据库配置（开发环境）
  datasource:
    url: jdbc:mysql://localhost:3306/weeb?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&useServerPrepStmts=true&cachePrepStmts=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root  # 开发环境默认用户名
    password: 1234  # 开发环境默认密码
    hikari:
      pool-name: WeebDevHikariPool
      minimum-idle: 5  # 最小空闲连接数
      maximum-pool-size: 20  # 最大连接数
      connection-timeout: 30000  # 连接超时时间（毫秒）
      idle-timeout: 600000  # 空闲连接超时时间（毫秒）
      max-lifetime: 1800000  # 连接最大生命周期（毫秒）
      validation-timeout: 5000  # 验证超时时间（毫秒）
      leak-detection-threshold: 60000  # 泄露检测阈值（毫秒）
      connection-test-query: SELECT 1  # 连接测试查询

  # MyBatis-Plus配置
  mybatis-plus:
    mapper-locations: classpath*:/Mapper/*.xml
    type-aliases-package: com.web.model
    configuration:
      map-underscore-to-camel-case: true
      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

  # 日志配置
  logging:
    level:
      root: INFO
      com.web: DEBUG
      org.springframework.security: DEBUG
      org.springframework.web: DEBUG
      org.springframework.jdbc: DEBUG
      org.springframework.transaction: DEBUG
    pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
      file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file:
      name: logs/weeb.log
      max-size: 10MB
      max-history: 30
      total-size-cap: 1GB

  # Redis配置（已启用）
  # Redis服务已启动，监听端口：6379
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      database: 0
      # 添加客户端配置以避免 INFO 命令解析问题
      client-type: lettuce
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        # 添加关闭超时配置
        shutdown-timeout: 100ms

  # Elasticsearch配置（HTTP模式，无需认证）
  elasticsearch:
    uris: http://localhost:9200

  # Spring AI OpenAI配置 - 添加虚拟API key避免启动失败
  ai:
    openai:
      api-key: "sk-fake-key-for-startup-only" # 虚拟API key，仅用于避免启动失败

  # 可选：临时关闭 Reactive ES 自动装配，纯用阻塞式客户端即可
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchClientAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration
      # 禁用OpenAI自动配置，避免API key缺失导致的启动失败
      - org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration

# Elasticsearch功能开关
elasticsearch:
  enabled: true

management:
  # 完全禁用 Redis 健康检查
  health:
    redis:
      enabled: false
    # 启用其他健康检查
    db:
      enabled: true
    diskspace:
      enabled: true
  # 健康检查端点配置
  endpoint:
    health:
      show-details: always

weeb:
  password: sun55@kong # 群聊密码
  limit: 100 # 在线人数限制
  name: 233 # 群聊名称
  expires: 7 # 数据过期时间（天）
  upload:
    base-path: uploads # 本地文件上传基础路径

  # Redis配置优化（已合并到上面的Redis配置中）
  # repositories.enabled已在上面配置


# JWT配置
jwt:
  secret: "6nNV5m9AQwP2zDgFj2025StrongKeyRotateMe" # 强随机秘钥，移除特殊字符
  expiration: 86400000 # JWT令牌有效期，默认为24小时（毫秒）

# WebSocket配置
websocket:
  port: 8081 # WebSocket服务端口
  path: /ws # WebSocket路径
  max-connections: 1000 # 最大连接数
  heartbeat-interval: 30 # 心跳间隔（秒）
  idle-timeout: 90 # 空闲超时（秒）

# AI 服务配置
ai:
  provider: ollama # 默认AI提供商: ollama 或 deepseek
  ollama:
    base-url: "http://localhost:11434" # Ollama API基础URL
    chat-model: "gemma3:4b" # 默认聊天模型
  deepseek:
    base-url: "https://api.deepseek.com" # DeepSeek API基础URL
    api-key: "sk-bbbb66a040044cb6a097474791bf79d4" # DeepSeek API Key (请替换为您的真实Key)
    chat-model: "deepseek-chat" # 默认聊天模型