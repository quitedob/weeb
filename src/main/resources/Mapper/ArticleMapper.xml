<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.mapper.ArticleMapper">

    <resultMap id="ArticleResultMap" type="com.web.model.Article">
        <id property="id" column="article_id"/>
        <result property="userId" column="user_id"/>
        <result property="articleTitle" column="article_title"/>
        <result property="articleContent" column="article_content"/>
        <result property="articleLink" column="article_link"/>
        <result property="status" column="status"/>
        <result property="likesCount" column="likes_count"/>
        <result property="favoritesCount" column="favorites_count"/>
        <result property="sponsorsCount" column="sponsors_count"/>
        <result property="exposureCount" column="exposure_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <select id="getAllArticles" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            article_id,
            user_id,
            article_title,
            article_content,
            article_link,
            status,
            likes_count,
            favorites_count,
            sponsors_count,
            created_at,
            updated_at,
            exposure_count
        FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        ORDER BY updated_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="countAllArticles" resultType="int">
        SELECT COUNT(*) FROM articles WHERE status = 1  <!-- 只统计已发布的文章 -->
    </select>

    <select id="selectArticleById" parameterType="long" resultMap="ArticleResultMap">
        SELECT * FROM articles WHERE article_id = #{id}
    </select>

    <insert id="subscribeUser" parameterType="map">
        INSERT IGNORE INTO subscriptions (user_id, target_user_id)
        VALUES (#{userId}, #{targetUserId})
    </insert>

    <insert id="insertArticle" parameterType="com.web.model.Article" useGeneratedKeys="true" keyProperty="id" keyColumn="article_id">
        INSERT INTO articles (user_id, article_title, article_content, article_link, status, 
                              likes_count, favorites_count, sponsors_count, exposure_count, 
                              created_at, updated_at)
        VALUES (#{userId}, #{articleTitle}, #{articleContent}, #{articleLink}, #{status}, 
                #{likesCount}, #{favoritesCount}, #{sponsorsCount}, #{exposureCount}, 
                #{createdAt}, #{updatedAt})
    </insert>


    <update id="updateArticle" parameterType="com.web.model.Article">
        UPDATE articles
        SET article_title = #{articleTitle},
        article_link = #{articleLink},
        likes_count = #{likesCount},
        favorites_count = #{favoritesCount},
        sponsors_count = #{sponsorsCount},
        exposure_count = #{exposureCount},
        updated_at = NOW()
        WHERE article_id = #{id}
    </update>
    <delete id="deleteArticleById" parameterType="long">
        DELETE FROM articles WHERE article_id = #{id}
    </delete>

    <select id="selectAggregatedStatsByUserId" parameterType="long" resultType="map">
            SELECT
                SUM(likes_count) AS total_likes,
                SUM(favorites_count) AS total_favorites,
                SUM(sponsors_count) AS total_sponsorship,
                SUM(exposure_count) AS total_exposure,
                COUNT(*) AS article_count
            FROM articles
            WHERE user_id = #{userId}
    </select>

    <update id="increaseLikeCount" parameterType="long">
        UPDATE articles SET likes_count = likes_count + 1 WHERE article_id = #{id}
    </update>

    <select id="selectArticlesByUserId" parameterType="long" resultMap="ArticleResultMap">
        SELECT
        article_id,
        user_id,
        article_title,
        article_content,
        likes_count,
        favorites_count,
        sponsors_count,
        exposure_count,
        created_at,
        updated_at
        FROM articles
        WHERE user_id = #{userId}
    </select>

    <!-- 更新用户统计表的文章相关统计数据 -->
    <update id="updateUserStatsArticleStats" parameterType="map">
        UPDATE user_stats
        SET
            total_likes = #{total_likes},
            total_favorites = #{total_favorites},
            total_sponsorship = #{total_sponsorship},
            total_article_exposure = #{total_exposure},
            updated_at = CURRENT_TIMESTAMP
        WHERE user_id = #{userId}
    </update>
    <update id="updateArticleContent" parameterType="map">
        UPDATE articles
        SET article_title = #{article.articleTitle},
            article_content = #{article.articleContent},
            article_link = #{article.articleLink},
            status = #{article.status},
            updated_at = NOW()
        WHERE article_id = #{id}
    </update>


    <update id="addCoin" parameterType="map">
        <!-- 根据需要更新文章赞助数或其他字段，此处示例为更新赞助数 -->
        UPDATE articles
        SET sponsors_count = sponsors_count + #{amount}
        WHERE article_id = #{id}
    </update>

    <update id="increaseReadCount" parameterType="long">
        UPDATE articles SET exposure_count = exposure_count + 1 WHERE article_id = #{id}
    </update>

    <!-- 根据 userId 汇总 articles 表中各项数据并更新 user_stats 表 -->
    <update id="updateUserStatsTotals" parameterType="long">
        UPDATE user_stats us
        JOIN (
            SELECT
                user_id,
                COALESCE(SUM(likes_count), 0) AS total_likes,
                COALESCE(SUM(favorites_count), 0) AS total_favorites,
                COALESCE(SUM(sponsors_count), 0) AS total_sponsorship,
                COALESCE(SUM(exposure_count), 0) AS total_article_exposure
            FROM articles
            WHERE user_id = #{userId}
            GROUP BY user_id
        ) AS stats ON us.user_id = stats.user_id
        SET
            us.total_likes = stats.total_likes,
            us.total_favorites = stats.total_favorites,
            us.total_sponsorship = stats.total_sponsorship,
            us.total_article_exposure = stats.total_article_exposure,
            us.updated_at = CURRENT_TIMESTAMP
        WHERE us.user_id = #{userId};
    </update>

    <!-- 查询 user_stats 表中的用户统计信息 -->
    <select id="selectUserStatsInformation" parameterType="long" resultType="map">
        SELECT
            fans_count,            -- 粉丝数
            total_likes,           -- 总点赞数
            total_favorites,       -- 总收藏数
            total_sponsorship,     -- 总赞助数
            total_article_exposure,-- 总文章曝光数
            website_coins          -- 网站币
        FROM user_stats
        WHERE user_id = #{userId}
    </select>

</mapper>
