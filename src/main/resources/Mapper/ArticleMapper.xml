<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.mapper.ArticleMapper">

    <resultMap id="ArticleResultMap" type="com.web.model.Article">
        <id property="articleId" column="article_id"/>
        <result property="userId" column="user_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="articleTitle" column="article_title"/>
        <result property="articleContent" column="article_content"/>
        <result property="articleLink" column="article_link"/>
        <result property="status" column="status"/>
        <result property="likesCount" column="likes_count"/>
        <result property="favoritesCount" column="favorites_count"/>
        <result property="sponsorsCount" column="sponsors_count"/>
        <result property="exposureCount" column="exposure_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <select id="getRecommendedArticles" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            article_id,
            user_id,
            category_id,
            article_title,
            article_content,
            article_link,
            status,
            likes_count,
            favorites_count,
            sponsors_count,
            created_at,
            updated_at,
            exposure_count,
            <!-- 计算推荐分数：点赞数*0.3 + 阅读量*0.2 + 收藏数*0.3 + 发布时间新鲜度*0.2 -->
            <![CDATA[(likes_count * 0.3 + exposure_count * 0.2 + favorites_count * 0.3 + (TIMESTAMPDIFF(DAY, created_at, NOW()) < 7) * 10 * 0.2) AS recommend_score]]>
        FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        <![CDATA[AND created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)]]><!-- 只推荐30天内的文章 -->
        ORDER BY recommend_score DESC, created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="getAllArticles" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            article_id,
            user_id,
            category_id,
            article_title,
            article_content,
            article_link,
            status,
            likes_count,
            favorites_count,
            sponsors_count,
            created_at,
            updated_at,
            exposure_count
        FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        <choose>
            <when test="sortBy == 'created_at' and sortOrder == 'asc'">
                ORDER BY created_at ASC
            </when>
            <when test="sortBy == 'created_at' and sortOrder == 'desc'">
                ORDER BY created_at DESC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'asc'">
                ORDER BY exposure_count ASC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'desc'">
                ORDER BY exposure_count DESC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'asc'">
                ORDER BY likes_count ASC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'desc'">
                ORDER BY likes_count DESC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'asc'">
                ORDER BY favorites_count ASC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'desc'">
                ORDER BY favorites_count DESC
            </when>
            <otherwise>
                ORDER BY created_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="searchArticles" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            article_id,
            user_id,
            category_id,
            article_title,
            article_content,
            article_link,
            status,
            likes_count,
            favorites_count,
            sponsors_count,
            created_at,
            updated_at,
            exposure_count
        FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        AND (article_title LIKE CONCAT('%', #{query}, '%') OR article_content LIKE CONCAT('%', #{query}, '%'))
        <choose>
            <when test="sortBy == 'created_at' and sortOrder == 'asc'">
                ORDER BY created_at ASC
            </when>
            <when test="sortBy == 'created_at' and sortOrder == 'desc'">
                ORDER BY created_at DESC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'asc'">
                ORDER BY exposure_count ASC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'desc'">
                ORDER BY exposure_count DESC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'asc'">
                ORDER BY likes_count ASC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'desc'">
                ORDER BY likes_count DESC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'asc'">
                ORDER BY favorites_count ASC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'desc'">
                ORDER BY favorites_count DESC
            </when>
            <otherwise>
                ORDER BY created_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 优化版本：使用全文索引搜索 -->
    <select id="searchArticlesOptimized" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            article_id,
            user_id,
            category_id,
            article_title,
            article_content,
            article_link,
            status,
            likes_count,
            favorites_count,
            sponsors_count,
            created_at,
            updated_at,
            exposure_count,
            MATCH(article_title, article_content) AGAINST(#{query} IN BOOLEAN MODE) as relevance_score
        FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        AND MATCH(article_title, article_content) AGAINST(#{query} IN BOOLEAN MODE)
        <choose>
            <when test="sortBy == 'created_at' and sortOrder == 'asc'">
                ORDER BY created_at ASC
            </when>
            <when test="sortBy == 'created_at' and sortOrder == 'desc'">
                ORDER BY created_at DESC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'asc'">
                ORDER BY exposure_count ASC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'desc'">
                ORDER BY exposure_count DESC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'asc'">
                ORDER BY likes_count ASC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'desc'">
                ORDER BY likes_count DESC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'asc'">
                ORDER BY favorites_count ASC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'desc'">
                ORDER BY favorites_count DESC
            </when>
            <otherwise>
                ORDER BY relevance_score DESC, updated_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="countSearchResults" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM articles 
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        AND (article_title LIKE CONCAT('%', #{query}, '%') OR article_content LIKE CONCAT('%', #{query}, '%'))
    </select>

    <select id="countAllArticles" resultType="int">
        SELECT COUNT(*) FROM articles WHERE status = 1  <!-- 只统计已发布的文章 -->
    </select>

    <select id="selectArticleById" parameterType="long" resultMap="ArticleResultMap">
        SELECT 
            article_id, 
            user_id, 
            category_id,
            article_title, 
            article_content, 
            article_link, 
            status, 
            likes_count, 
            favorites_count, 
            sponsors_count, 
            created_at, 
            updated_at, 
            exposure_count 
        FROM articles 
        WHERE article_id = #{id}
    </select>

    <insert id="subscribeUser" parameterType="map">
        INSERT IGNORE INTO subscriptions (user_id, target_user_id)
        VALUES (#{userId}, #{targetUserId})
    </insert>

    <insert id="insertArticle" parameterType="com.web.model.Article" useGeneratedKeys="true" keyProperty="articleId" keyColumn="article_id">
        INSERT INTO articles (user_id, category_id, article_title, article_content, article_link, status, 
                              likes_count, favorites_count, sponsors_count, exposure_count, 
                              created_at, updated_at)
        VALUES (#{userId}, #{categoryId}, #{articleTitle}, #{articleContent}, #{articleLink}, #{status}, 
                #{likesCount}, #{favoritesCount}, #{sponsorsCount}, #{exposureCount}, 
                #{createdAt}, #{updatedAt})
    </insert>


    <update id="updateArticle" parameterType="com.web.model.Article">
        UPDATE articles
        SET category_id = #{categoryId},
            article_title = #{articleTitle},
            article_link = #{articleLink},
            likes_count = #{likesCount},
            favorites_count = #{favoritesCount},
            sponsors_count = #{sponsorsCount},
            exposure_count = #{exposureCount},
            updated_at = NOW()
        WHERE article_id = #{articleId}
    </update>
    <delete id="deleteArticleById" parameterType="long">
        DELETE FROM articles WHERE article_id = #{id}
    </delete>

    <select id="selectAggregatedStatsByUserId" parameterType="long" resultType="map">
            SELECT
                SUM(likes_count) AS total_likes,
                SUM(favorites_count) AS total_favorites,
                SUM(sponsors_count) AS total_sponsorship,
                SUM(exposure_count) AS total_exposure,
                COUNT(*) AS article_count
            FROM articles
            WHERE user_id = #{userId}
    </select>

    <update id="increaseLikeCount" parameterType="long">
        UPDATE articles SET likes_count = likes_count + 1 WHERE article_id = #{id}
    </update>

    <select id="selectArticlesByUserId" parameterType="long" resultMap="ArticleResultMap">
        SELECT
        article_id,
        user_id,
        article_title,
        article_content,
        likes_count,
        favorites_count,
        sponsors_count,
        exposure_count,
        created_at,
        updated_at
        FROM articles
        WHERE user_id = #{userId}
    </select>

    <!-- 更新用户统计表的文章相关统计数据 -->
    <update id="updateUserStatsArticleStats" parameterType="map">
        UPDATE user_stats
        SET
            total_likes = #{total_likes},
            total_favorites = #{total_favorites},
            total_sponsorship = #{total_sponsorship},
            total_article_exposure = #{total_exposure},
            updated_at = CURRENT_TIMESTAMP
        WHERE user_id = #{userId}
    </update>
    <update id="updateArticleContent" parameterType="map">
        UPDATE articles
        SET article_title = #{article.articleTitle},
            article_content = #{article.articleContent},
            article_link = #{article.articleLink},
            status = #{article.status},
            updated_at = NOW()
        WHERE article_id = #{id}
    </update>


    <update id="addCoin" parameterType="map">
        <!-- 根据需要更新文章赞助数或其他字段，此处示例为更新赞助数 -->
        UPDATE articles
        SET sponsors_count = sponsors_count + #{amount}
        WHERE article_id = #{id}
    </update>

    <update id="increaseReadCount" parameterType="long">
        UPDATE articles SET exposure_count = exposure_count + 1 WHERE article_id = #{id}
    </update>

    <!-- 根据 userId 汇总 articles 表中各项数据并更新 user_stats 表 -->
    <update id="updateUserStatsTotals" parameterType="long">
        UPDATE user_stats us
        JOIN (
            SELECT
                user_id,
                COALESCE(SUM(likes_count), 0) AS total_likes,
                COALESCE(SUM(favorites_count), 0) AS total_favorites,
                COALESCE(SUM(sponsors_count), 0) AS total_sponsorship,
                COALESCE(SUM(exposure_count), 0) AS total_article_exposure
            FROM articles
            WHERE user_id = #{userId}
            GROUP BY user_id
        ) AS stats ON us.user_id = stats.user_id
        SET
            us.total_likes = stats.total_likes,
            us.total_favorites = stats.total_favorites,
            us.total_sponsorship = stats.total_sponsorship,
            us.total_article_exposure = stats.total_article_exposure,
            us.updated_at = CURRENT_TIMESTAMP
        WHERE us.user_id = #{userId};
    </update>

    <!-- 查询 user_stats 表中的用户统计信息 -->
    <select id="selectUserStatsInformation" parameterType="long" resultType="map">
        SELECT
            fans_count,            -- 粉丝数
            total_likes,           -- 总点赞数
            total_favorites,       -- 总收藏数
            total_sponsorship,     -- 总赞助数
            total_article_exposure,-- 总文章曝光数
            website_coins          -- 网站币
        FROM user_stats
        WHERE user_id = #{userId}
    </select>

    <!-- 根据用户名获取用户的完整信息（JOIN查询，避免N+1问题） -->
    <select id="selectUserCompleteInformationByUsername" parameterType="string" resultType="map">
        SELECT
            u.id,
            u.username,
            u.user_email,
            u.sex,
            u.phone_number,
            u.registration_date,
            u.ip_ownership,
            u.type,
            u.avatar,
            u.nickname,
            u.badge,
            u.login_time,
            u.bio,
            u.online_status,
            u.created_at,
            u.updated_at,
            -- 计算注册天数
            TIMESTAMPDIFF(DAY, u.registration_date, NOW()) as registration_days,
            -- 统计数据
            COALESCE(us.fans_count, 0) as fans_count,
            COALESCE(us.total_likes, 0) as total_likes,
            COALESCE(us.total_favorites, 0) as total_favorites,
            COALESCE(us.total_sponsorship, 0) as total_sponsorship,
            COALESCE(us.total_article_exposure, 0) as total_article_exposure,
            COALESCE(us.website_coins, 0) as website_coins
        FROM user u
        LEFT JOIN user_stats us ON u.id = us.user_id
        WHERE u.username = #{username}
    </select>

    <!-- 收藏相关SQL -->
    <insert id="insertFavorite" parameterType="map">
        INSERT IGNORE INTO article_favorite (article_id, user_id, created_at)
        VALUES (#{articleId}, #{userId}, NOW())
    </insert>

    <delete id="deleteFavorite" parameterType="map">
        DELETE FROM article_favorite 
        WHERE article_id = #{articleId} AND user_id = #{userId}
    </delete>

    <select id="countFavorite" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM article_favorite 
        WHERE article_id = #{articleId} AND user_id = #{userId}
    </select>

    <select id="getUserFavoriteArticles" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            a.article_id,
            a.user_id,
            a.article_title,
            a.article_content,
            a.article_link,
            a.status,
            a.likes_count,
            a.favorites_count,
            a.sponsors_count,
            a.created_at,
            a.updated_at,
            a.exposure_count
        FROM articles a
        INNER JOIN article_favorite f ON a.article_id = f.article_id
        WHERE f.user_id = #{userId}
        ORDER BY f.created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="countUserFavoriteArticles" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM article_favorite WHERE user_id = #{userId}
    </select>

    <update id="increaseFavoriteCount" parameterType="long">
        UPDATE articles SET favorites_count = favorites_count + 1 WHERE article_id = #{articleId}
    </update>

    <update id="decreaseFavoriteCount" parameterType="long">
        UPDATE articles SET favorites_count = GREATEST(favorites_count - 1, 0) WHERE article_id = #{articleId}
    </update>

    <!-- 带过滤条件的搜索文章 -->
    <select id="searchArticlesWithFilters" parameterType="map" resultMap="ArticleResultMap">
        SELECT
            article_id,
            user_id,
            category_id,
            article_title,
            article_content,
            article_link,
            status,
            likes_count,
            favorites_count,
            sponsors_count,
            created_at,
            updated_at,
            exposure_count
        FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        AND (article_title LIKE CONCAT('%', #{query}, '%') OR article_content LIKE CONCAT('%', #{query}, '%'))
        <if test="startDate != null and startDate != ''">
            <![CDATA[AND DATE(created_at) >= #{startDate}]]>
        </if>
        <if test="endDate != null and endDate != ''">
            <![CDATA[AND DATE(created_at) <= #{endDate}]]>
        </if>
        <choose>
            <when test="sortBy == 'created_at' and sortOrder == 'asc'">
                ORDER BY created_at ASC
            </when>
            <when test="sortBy == 'created_at' and sortOrder == 'desc'">
                ORDER BY created_at DESC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'asc'">
                ORDER BY exposure_count ASC
            </when>
            <when test="sortBy == 'exposure_count' and sortOrder == 'desc'">
                ORDER BY exposure_count DESC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'asc'">
                ORDER BY likes_count ASC
            </when>
            <when test="sortBy == 'likes_count' and sortOrder == 'desc'">
                ORDER BY likes_count DESC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'asc'">
                ORDER BY favorites_count ASC
            </when>
            <when test="sortBy == 'favorites_count' and sortOrder == 'desc'">
                ORDER BY favorites_count DESC
            </when>
            <otherwise>
                ORDER BY created_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 统计带过滤条件的搜索结果数量 -->
    <select id="countSearchResultsWithFilters" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM articles
        WHERE status = 1        <!-- 只显示已发布的文章 -->
        AND (article_title LIKE CONCAT('%', #{query}, '%') OR article_content LIKE CONCAT('%', #{query}, '%'))
        <if test="startDate != null and startDate != ''">
            <![CDATA[AND DATE(created_at) >= #{startDate}]]>
        </if>
        <if test="endDate != null and endDate != ''">
            <![CDATA[AND DATE(created_at) <= #{endDate}]]>
        </if>
    </select>

    <!-- 高级搜索文章 -->
    <select id="searchArticlesAdvanced" resultMap="ArticleResultMap">
        SELECT
            article_id, user_id, category_id, article_title, article_content, article_link,
            status, likes_count, favorites_count, sponsors_count, exposure_count,
            created_at, updated_at
        FROM articles
        <where>
            <if test="searchVo.query != null and searchVo.query != ''">
                (article_title LIKE CONCAT('%', #{searchVo.query}, '%') OR article_content LIKE CONCAT('%', #{searchVo.query}, '%'))
            </if>
            <if test="searchVo.startDate != null and searchVo.startDate != ''">
                <![CDATA[AND created_at >= #{searchVo.startDate}]]>
            </if>
            <if test="searchVo.endDate != null and searchVo.endDate != ''">
                <![CDATA[AND created_at <= #{searchVo.endDate}]]>
            </if>
            <if test="searchVo.categoryIds != null and !searchVo.categoryIds.isEmpty()">
                AND category_id IN
                <foreach item="item" collection="searchVo.categoryIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="searchVo.authorId != null">
                AND user_id = #{searchVo.authorId}
            </if>
            <if test="searchVo.status != null">
                AND status = #{searchVo.status}
            </if>
            <if test="searchVo.minLikes != null">
                <![CDATA[AND likes_count >= #{searchVo.minLikes}]]>
            </if>
            <if test="searchVo.maxLikes != null">
                <![CDATA[AND likes_count <= #{searchVo.maxLikes}]]>
            </if>
            <if test="searchVo.minExposure != null">
                <![CDATA[AND exposure_count >= #{searchVo.minExposure}]]>
            </if>
            <if test="searchVo.maxExposure != null">
                <![CDATA[AND exposure_count <= #{searchVo.maxExposure}]]>
            </if>
        </where>
        ORDER BY ${searchVo.sortBy} ${searchVo.sortOrder}
        LIMIT #{offset}, #{searchVo.pageSize}
    </select>

    <!-- 统计高级搜索结果数量 -->
    <select id="countAdvancedSearchResults" resultType="int">
        SELECT count(*)
        FROM articles
        <where>
            <if test="searchVo.query != null and searchVo.query != ''">
                (article_title LIKE CONCAT('%', #{searchVo.query}, '%') OR article_content LIKE CONCAT('%', #{searchVo.query}, '%'))
            </if>
            <if test="searchVo.startDate != null and searchVo.startDate != ''">
                <![CDATA[AND created_at >= #{searchVo.startDate}]]>
            </if>
            <if test="searchVo.endDate != null and searchVo.endDate != ''">
                <![CDATA[AND created_at <= #{searchVo.endDate}]]>
            </if>
            <if test="searchVo.categoryIds != null and !searchVo.categoryIds.isEmpty()">
                AND category_id IN
                <foreach item="item" collection="searchVo.categoryIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="searchVo.authorId != null">
                AND user_id = #{searchVo.authorId}
            </if>
            <if test="searchVo.status != null">
                AND status = #{searchVo.status}
            </if>
            <if test="searchVo.minLikes != null">
                <![CDATA[AND likes_count >= #{searchVo.minLikes}]]>
            </if>
            <if test="searchVo.maxLikes != null">
                <![CDATA[AND likes_count <= #{searchVo.maxLikes}]]>
            </if>
            <if test="searchVo.minExposure != null">
                <![CDATA[AND exposure_count >= #{searchVo.minExposure}]]>
            </if>
            <if test="searchVo.maxExposure != null">
                <![CDATA[AND exposure_count <= #{searchVo.maxExposure}]]>
            </if>
        </where>
    </select>

    <!-- 根据状态统计文章数量 -->
    <select id="countByStatus" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM articles WHERE status = #{status}
    </select>

    <!-- 统计今日审核的文章数量 -->
    <select id="countReviewedToday" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM articles
        WHERE DATE(updated_at) = #{today}
        AND status IN (1, 2)  <!-- 假设1=已审核通过, 2=已拒绝 -->
    </select>

    <!-- 统计指定时间段内审核的文章数量 -->
    <select id="countReviewedInPeriod" resultType="int">
        SELECT COUNT(*) FROM articles
        WHERE DATE(updated_at) BETWEEN #{startDate} AND #{endDate}
        AND status IN (1, 2)  <!-- 假设1=已审核通过, 2=已拒绝 -->
    </select>

    <!-- 更新文章状态 -->
    <update id="updateArticleStatus" parameterType="map">
        UPDATE articles
        SET status = #{status}, updated_at = NOW()
        WHERE article_id = #{articleId}
    </update>

    <!-- ==================== 点赞相关SQL ==================== -->

    <!-- 插入点赞记录 -->
    <insert id="insertArticleLike">
        INSERT INTO article_like (user_id, article_id, created_at)
        VALUES (#{userId}, #{articleId}, NOW())
    </insert>

    <!-- 删除点赞记录 -->
    <delete id="deleteArticleLike">
        DELETE FROM article_like 
        WHERE user_id = #{userId} AND article_id = #{articleId}
    </delete>

    <!-- 检查用户是否已点赞文章 -->
    <select id="isArticleLikedByUser" resultType="boolean">
        SELECT COUNT(*) > 0 FROM article_like
        WHERE user_id = #{userId} AND article_id = #{articleId}
    </select>

    <!-- 统计文章点赞数 -->
    <select id="countArticleLikes" resultType="int">
        SELECT COUNT(*) FROM article_like WHERE article_id = #{articleId}
    </select>

    <!-- 减少文章点赞数 -->
    <update id="decreaseLikeCount" parameterType="long">
        UPDATE articles SET likes_count = GREATEST(likes_count - 1, 0) WHERE article_id = #{articleId}
    </update>

</mapper>
