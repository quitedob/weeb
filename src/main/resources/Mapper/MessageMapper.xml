<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.mapper.MessageMapper">

    <resultMap id="MessageResultMap" type="com.web.model.Message">
        <id column="id" property="id" />
        <result column="sender_id" property="senderId" />
        <result column="chat_id" property="chatId" />
        <result column="content" property="content" typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler"/>
        <result column="message_type" property="messageType" />
        <result column="read_status" property="readStatus" />
        <result column="is_recalled" property="isRecalled" />
        <result column="user_ip" property="userIp" />
        <result column="source" property="source" />
        <result column="reply_to_message_id" property="replyToMessageId" />
        <result column="is_show_time" property="isShowTime" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
    </resultMap>

    <select id="getPreviousShowTimeMsg" parameterType="map" resultMap="MessageResultMap">
        SELECT *
        FROM `message`
        WHERE (`sender_id` = #{userId} AND `chat_id` = #{targetId})
           OR (`sender_id` = #{targetId} AND `chat_id` = #{userId})
        ORDER BY `created_at` DESC
        LIMIT 1
    </select>

    <select id="record" parameterType="map" resultMap="MessageResultMap">
        SELECT *
        FROM `message`
        WHERE (`sender_id` = #{userId} AND `chat_id` = #{targetId})
           OR (`sender_id` = #{targetId} AND `chat_id` = #{userId})
           OR (`source` = 'Group' AND `chat_id` = #{targetId})
        ORDER BY `created_at` DESC
        LIMIT #{index}, #{num}
    </select>

    <!-- 根据用户ID查询消息（用于selectMessagesByUsers方法） -->
    <select id="selectMessagesByUsers" parameterType="map" resultMap="MessageResultMap">
        SELECT *
        FROM `message`
        WHERE (`sender_id` = #{userId} AND `chat_id` = #{targetId})
           OR (`sender_id` = #{targetId} AND `chat_id` = #{userId})
        ORDER BY `created_at` DESC
        LIMIT #{index}, #{num}
    </select>

    <!-- 插入消息记录 -->
    <insert id="insertMessage" parameterType="com.web.model.Message" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO message (
            sender_id, chat_id, content, message_type, read_status, is_recalled,
            user_ip, source, is_show_time, created_at, updated_at
        ) VALUES (
            #{senderId}, #{chatId}, #{content, typeHandler=com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler},
            #{messageType}, #{readStatus}, #{isRecalled},
            #{userIp}, #{source}, #{isShowTime}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 插入群消息记录 -->
    <insert id="insertGroupMessage" parameterType="com.web.model.Message" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO message (
            sender_id, chat_id, content, message_type, read_status, is_recalled,
            user_ip, source, is_show_time, created_at, updated_at
        ) VALUES (
            #{senderId}, #{chatId}, #{content, typeHandler=com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler},
            #{messageType}, #{readStatus}, #{isRecalled},
            #{userIp}, #{source}, #{isShowTime}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 根据消息ID查询消息 -->
    <select id="selectMessageById" parameterType="java.lang.Long" resultMap="MessageResultMap">
        SELECT * FROM message WHERE id = #{msgId}
    </select>

    <!-- 标记消息为已撤回 -->
    <update id="markMessageAsRecalled">
        UPDATE message SET is_recalled = 1, updated_at = NOW() WHERE id = #{msgId}
    </update>

    <!-- 删除过期消息 -->
    <delete id="deleteExpiredMessages">
        <![CDATA[
        DELETE FROM message WHERE created_at < #{expirationDate}
        ]]>
    </delete>

    <!-- 处理消息反应 -->
    <update id="handleReaction">
        UPDATE message SET
            content = JSON_SET(
                content,
                '$.reactions',
                JSON_ARRAY_APPEND(
                    COALESCE(JSON_EXTRACT(content, '$.reactions'), JSON_ARRAY()),
                    '$',
                    #{reactionVo.reactionType}
                )
            ),
            updated_at = NOW()
        WHERE id = #{reactionVo.messageId}
    </update>

    <!-- 根据聊天ID查询最后一条消息 -->
    <select id="selectLastMessageByChatId" parameterType="map" resultMap="MessageResultMap">
        SELECT *
        FROM message
        WHERE chat_id = #{chatId}
        ORDER BY created_at DESC
        LIMIT 1
    </select>

    <!-- 根据聊天ID分页查询消息 -->
    <select id="selectMessagesByChatId" parameterType="map" resultMap="MessageResultMap">
        SELECT *
        FROM message
        WHERE chat_id = #{chatId}
        ORDER BY created_at ASC
        LIMIT #{offset}, #{size}
    </select>

</mapper>
