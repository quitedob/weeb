package com.web.mapper;

import com.web.model.UserMention;
import org.apache.ibatis.annotations.*;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

/**
 * 用户提及Mapper接口
 */
@Mapper
public interface UserMentionMapper {

    /**
     * 插入用户提及
     */
    @Insert("INSERT INTO user_mentions (message_id, mentioner_id, mentioner_username, mentioned_user_id, " +
            "mentioned_username, mention_text, start_position, end_position, status, mention_type, " +
            "is_read, read_at, is_auto_generated, metadata, created_at, updated_at) " +
            "VALUES (#{messageId}, #{mentionerId}, #{mentionerUsername}, #{mentionedUserId}, " +
            "#{mentionedUsername}, #{mentionText}, #{startPosition}, #{endPosition}, #{status}, " +
            "#{mentionType}, #{isRead}, #{readAt}, #{isAutoGenerated}, #{metadata}, #{createdAt}, #{updatedAt})")
    @Options(useGeneratedKeys = true, keyProperty = "id")
    int insert(UserMention mention);

    /**
     * 更新用户提及
     */
    @Update("UPDATE user_mentions SET status = #{status}, is_read = #{isRead}, read_at = #{readAt}, " +
            "metadata = #{metadata}, updated_at = #{updatedAt} WHERE id = #{id}")
    int update(UserMention mention);

    /**
     * 根据ID查找提及
     */
    @Select("SELECT * FROM user_mentions WHERE id = #{mentionId}")
    UserMention findById(Long mentionId);

    /**
     * 根据消息ID查找提及
     */
    @Select("SELECT * FROM user_mentions WHERE message_id = #{messageId} ORDER BY created_at ASC")
    List<UserMention> findByMessageId(Long messageId);

    /**
     * 根据提及者ID查找提及
     */
    @Select("SELECT * FROM user_mentions WHERE mentioner_id = #{mentionerId} " +
            "ORDER BY created_at DESC LIMIT #{pageSize} OFFSET #{offset}")
    List<UserMention> findByMentionerId(@Param("mentionerId") Long mentionerId,
                                       @Param("offset") int offset,
                                       @Param("pageSize") int pageSize);

    /**
     * 统计提及者发起的提及数量
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioner_id = #{mentionerId}")
    int countByMentionerId(Long mentionerId);

    /**
     * 根据被提及用户ID查找提及
     */
    @Select("SELECT * FROM user_mentions WHERE mentioned_user_id = #{mentionedUserId} " +
            "ORDER BY created_at DESC LIMIT #{pageSize} OFFSET #{offset}")
    List<UserMention> findByMentionedUserId(@Param("mentionedUserId") Long mentionedUserId,
                                           @Param("offset") int offset,
                                           @Param("pageSize") int pageSize);

    /**
     * 统计被提及用户收到的提及数量
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioned_user_id = #{mentionedUserId}")
    int countByMentionedUserId(Long mentionedUserId);

    /**
     * 查找未读提及
     */
    @Select("SELECT * FROM user_mentions WHERE mentioned_user_id = #{mentionedUserId} AND is_read = false " +
            "ORDER BY created_at DESC LIMIT #{limit}")
    List<UserMention> findUnreadByMentionedUserId(@Param("mentionedUserId") Long mentionedUserId,
                                                 @Param("limit") int limit);

    /**
     * 统计未读提及数量
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioned_user_id = #{mentionedUserId} AND is_read = false")
    int countUnreadByMentionedUserId(Long mentionedUserId);

    /**
     * 标记所有提及为已读
     */
    @Update("UPDATE user_mentions SET is_read = true, read_at = NOW(), " +
            "status = 'read', updated_at = NOW() WHERE mentioned_user_id = #{mentionedUserId} AND is_read = false")
    int markAllAsReadByMentionedUserId(Long mentionedUserId);

    /**
     * 根据日期统计提及者发起的提及
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioner_id = #{mentionerId} " +
            "AND DATE(created_at) = #{date}")
    int countByMentionerIdAndDate(@Param("mentionerId") Long mentionerId, @Param("date") LocalDate date);

    /**
     * 统计提及者在指定天数内发起的提及
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioner_id = #{mentionerId} " +
            "AND created_at >= DATE_SUB(NOW(), INTERVAL #{days} DAY)")
    int countByMentionerIdAndDays(@Param("mentionerId") Long mentionerId, @Param("days") int days);

    /**
     * 根据日期统计被提及用户收到的提及
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioned_user_id = #{mentionedUserId} " +
            "AND DATE(created_at) = #{date}")
    int countByMentionedUserIdAndDate(@Param("mentionedUserId") Long mentionedUserId, @Param("date") LocalDate date);

    /**
     * 统计被提及用户在指定天数内收到的提及
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE mentioned_user_id = #{mentionedUserId} " +
            "AND created_at >= DATE_SUB(NOW(), INTERVAL #{days} DAY)")
    int countByMentionedUserIdAndDays(@Param("mentionedUserId") Long mentionedUserId, @Param("days") int days);

    /**
     * 搜索提及
     */
    @Select("SELECT * FROM user_mentions WHERE " +
            "(mentioner_username LIKE CONCAT('%', #{keyword}, '%') OR " +
            "mentioned_username LIKE CONCAT('%', #{keyword}, '%') OR " +
            "mention_text LIKE CONCAT('%', #{keyword}, '%')) " +
            "ORDER BY created_at DESC LIMIT #{pageSize} OFFSET #{offset}")
    List<UserMention> searchMentions(@Param("keyword") String keyword,
                                    @Param("offset") int offset,
                                    @Param("pageSize") int pageSize);

    /**
     * 搜索提及总数
     */
    @Select("SELECT COUNT(*) FROM user_mentions WHERE " +
            "(mentioner_username LIKE CONCAT('%', #{keyword}, '%') OR " +
            "mentioned_username LIKE CONCAT('%', #{keyword}, '%') OR " +
            "mention_text LIKE CONCAT('%', #{keyword}, '%'))")
    int searchMentionsCount(String keyword);

    /**
     * 删除提及
     */
    @Delete("DELETE FROM user_mentions WHERE id = #{mentionId}")
    int deleteById(Long mentionId);

    /**
     * 获取热门被提及用户
     */
    @Select("SELECT um.mentioned_user_id, u.username, COUNT(*) as mention_count " +
            "FROM user_mentions um " +
            "INNER JOIN users u ON um.mentioned_user_id = u.id " +
            "WHERE um.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY) " +
            "GROUP BY um.mentioned_user_id, u.username " +
            "ORDER BY mention_count DESC " +
            "LIMIT #{limit}")
    List<Map<String, Object>> findPopularMentionedUsers(@Param("limit") int limit);

    /**
     * 获取用户提及趋势
     */
    @Select("SELECT DATE(created_at) as date, " +
            "SUM(CASE WHEN mentioner_id = #{userId} THEN 1 ELSE 0 END) as sent_count, " +
            "SUM(CASE WHEN mentioned_user_id = #{userId} THEN 1 ELSE 0 END) as received_count " +
            "FROM user_mentions " +
            "WHERE (mentioner_id = #{userId} OR mentioned_user_id = #{userId}) " +
            "AND created_at >= DATE_SUB(NOW(), INTERVAL #{days} DAY) " +
            "GROUP BY DATE(created_at) " +
            "ORDER BY date ASC")
    List<Map<String, Object>> findMentionTrends(@Param("userId") Long userId, @Param("days") int days);

    /**
     * 获取提及回复统计
     */
    @Select("SELECT " +
            "COUNT(*) as total_mentions, " +
            "COUNT(CASE WHEN is_read = false THEN 1 END) as unread_mentions, " +
            "COUNT(CASE WHEN mention_type = 'reply' THEN 1 END) as reply_mentions, " +
            "COUNT(CASE WHEN mention_type = 'mention' THEN 1 END) as direct_mentions, " +
            "COUNT(CASE WHEN DATE(created_at) = CURDATE() THEN 1 END) as today_mentions " +
            "FROM user_mentions WHERE mentioned_user_id = #{userId}")
    Map<String, Object> getMentionReplyStats(Long userId);

    /**
     * 获取用户间的提及关系
     */
    @Select("SELECT mentioner_id, mentioned_user_id, COUNT(*) as mention_count " +
            "FROM user_mentions " +
            "WHERE mentioner_id = #{userId} OR mentioned_user_id = #{userId} " +
            "GROUP BY mentioner_id, mentioned_user_id " +
            "HAVING mention_count > 0 " +
            "ORDER BY mention_count DESC")
    List<Map<String, Object>> getUserMentionRelationships(Long userId);

    /**
     * 批量插入提及
     */
    @Insert({
        "<script>",
        "INSERT INTO user_mentions (message_id, mentioner_id, mentioner_username, mentioned_user_id, ",
        "mentioned_username, mention_text, start_position, end_position, status, mention_type, ",
        "is_read, is_auto_generated, metadata, created_at, updated_at) VALUES ",
        "<foreach collection='mentions' item='mention' separator=','>",
        "(#{mention.messageId}, #{mention.mentionerId}, #{mention.mentionerUsername}, ",
        "#{mention.mentionedUserId}, #{mention.mentionedUsername}, #{mention.mentionText}, ",
        "#{mention.startPosition}, #{mention.endPosition}, #{mention.status}, #{mention.mentionType}, ",
        "#{mention.isRead}, #{mention.isAutoGenerated}, #{mention.metadata}, ",
        "#{mention.createdAt}, #{mention.updatedAt})",
        "</foreach>",
        "</script>"
    })
    int batchInsert(@Param("mentions") List<UserMention> mentions);

    /**
     * 获取消息的提及统计
     */
    @Select("SELECT " +
            "COUNT(*) as total_mentions, " +
            "COUNT(DISTINCT mentioned_user_id) as unique_users_mentioned " +
            "FROM user_mentions WHERE message_id = #{messageId}")
    Map<String, Object> getMessageMentionStats(Long messageId);

    /**
     * 检查用户是否在消息中被提及
     */
    @Select("SELECT COUNT(*) > 0 FROM user_mentions " +
            "WHERE message_id = #{messageId} AND mentioned_user_id = #{userId}")
    boolean isUserMentionedInMessage(@Param("messageId") Long messageId, @Param("userId") Long userId);
}