package com.web.dto;

import lombok.Data;
import lombok.NoArgsConstructor; // Added for flexibility
import lombok.AllArgsConstructor; // Added for flexibility
import lombok.Builder; // Added for flexibility

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class NotifyDto<T> { // Make it generic

    private String type; // Existing: From WsContentType
    // private String content; // User example for status change uses 'data' field for map.
                               // Retaining 'content' if it's used for other notify types, or remove if 'data' replaces it.
                               // For now, let's assume 'data' is the primary payload for new structured notifies.
                               // If other notifies use 'content', this might need adjustment.
                               // For STATUS_CHANGE, content will be null, data will be used.
    private String content;


    private Date time;   // Existing
    private String ext;  // Existing - can be kept or removed if not used for STATUS_CHANGE

    private T data;      // New generic data field

    // Constructor if needed, or rely on Lombok @Builder / @AllArgsConstructor
    public NotifyDto(String type, T data) {
        this.type = type;
        this.data = data;
        this.time = new Date();
    }

    // Keep existing fields for now, ensure all-args constructor includes them if needed by other parts
    // Or ensure that if @AllArgsConstructor is used, other parts of code are updated if they relied on a specific constructor.
    // The explicit AllArgsConstructor above will be generated by Lombok to include 'data' and all existing fields.
    // The custom constructor NotifyDto(String type, T data) is a convenience.
}
